generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique // email is optional for OAuth
    emailVerified DateTime?
    image         String? // provided by NextAuth (OAuth profile picture)

    username String? @unique
    color    String? @default("#aa6ef1")
    bio      String? @db.Text

    accounts Account[]
    sessions Session[]

    photos   Photo[]
    comments Comment[]

    followedBy User[] @relation("UserFollows")
    following  User[] @relation("UserFollows")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Photo {
    id        String   @id @default(cuid())
    imageUrl  String
    caption   String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    comments Comment[]

    @@index([userId])
}

model Comment {
    id        String   @id @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    photoId String
    photo   Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([photoId])
    @@index([userId])
}
