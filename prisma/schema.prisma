generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DENIED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // email is optional for OAuth
  emailVerified DateTime?
  image         String? // provided by NextAuth (OAuth profile picture)

  username String? @unique
  color    String? @default("#aa6ef1")
  bio      String? @db.Text

  postNotifications       Boolean @default(true)
  commentNotifications    Boolean @default(true)
  friendRequestNotifications Boolean @default(true)

  accounts Account[]
  sessions Session[]

  photos   Photo[]
  comments Comment[]

  notifications     Notification[]
  pushSubscriptions PushSubscription[]

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friendshipsAsUser1     Friendship[]    @relation("FriendshipUser1")
  friendshipsAsUser2     Friendship[]    @relation("FriendshipUser2")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Photo {
  id        String   @id @default(cuid())
  imageUrl  String
  caption   String?  @db.Text
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments      Comment[]
  notifications Notification[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photoId String
  photo   Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([photoId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String // 'photo_post' | 'comment' | 'friend request'
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  photoId String?
  photo   Photo?  @relation(fields: [photoId], references: [id], onDelete: Cascade)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@map("Notification")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("PushSubscription")
}

model FriendRequest {
  id          String              @id @default(cuid())
  requesterId String
  requester   User                @relation("SentFriendRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  requestedId String
  requested   User                @relation("ReceivedFriendRequests", fields: [requestedId], references: [id], onDelete: Cascade)
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([requesterId, requestedId])
  @@index([requesterId])
  @@index([requestedId])
  @@index([status])
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user1     User     @relation("FriendshipUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id   String
  user2     User     @relation("FriendshipUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}
